{
    "sourceFile": "src/pages/HomePage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1747978366217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747978557818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n \r\n       {loading && <p>Loading...</p>}\r\n       {error && <p className=\"text-red-500\">{error}</p>}\r\n \r\n-      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n+      <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n         {paginatedProducts.map((product:Product) => (\r\n           <ProductCard\r\n             key={product.id}\r\n             product={product}\r\n"
                },
                {
                    "date": 1747978679429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n \r\n       {loading && <p>Loading...</p>}\r\n       {error && <p className=\"text-red-500\">{error}</p>}\r\n \r\n-      <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n         {paginatedProducts.map((product:Product) => (\r\n           <ProductCard\r\n             key={product.id}\r\n             product={product}\r\n"
                },
                {
                    "date": 1747978687928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,8 +236,9 @@\n             key={product.id}\r\n             product={product}\r\n             onEdit={handleEdit}\r\n             onDelete={handleDelete}\r\n+            className=\"border border-red-500\"\r\n           />\r\n         ))}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1747978694268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,15 +231,16 @@\n       {error && <p className=\"text-red-500\">{error}</p>}\r\n \r\n       <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n         {paginatedProducts.map((product:Product) => (\r\n-          <ProductCard\r\n-            key={product.id}\r\n-            product={product}\r\n-            onEdit={handleEdit}\r\n-            onDelete={handleDelete}\r\n-            className=\"border border-red-500\"\r\n-          />\r\n+          <div className=\"border border-red-500\">\r\n+            <ProductCard\r\n+              key={product.id}\r\n+              product={product}\r\n+              onEdit={handleEdit}\r\n+              onDelete={handleDelete}\r\n+            />\r\n+          </div>\r\n         ))}\r\n       </div>\r\n \r\n       {totalPages > 1 && (\r\n"
                },
                {
                    "date": 1747979337841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,170 +1,196 @@\n-import { useEffect, useState } from \"react\";\r\n-import { useDispatch, useSelector } from \"react-redux\";\r\n-import {\r\n-  fetchProducts,\r\n-  createProduct,\r\n-  updateProduct,\r\n-  deleteProduct,\r\n-} from \"../redux/productsSlice\";\r\n-import type { RootState, AppDispatch } from \"../redux/store\";\r\n-import ProductCard from \"../components/ProductCard\";\r\n-import { toast } from \"react-toastify\";\r\n-import type { Product } from \"../types/product\";\r\n+\"use client\"\r\n+\r\n+import type React from \"react\"\r\n+\r\n+import { useEffect, useState } from \"react\"\r\n+import { useDispatch, useSelector } from \"react-redux\"\r\n+import { fetchProducts, createProduct, updateProduct, deleteProduct } from \"./redux/productsSlice\"\r\n+import type { RootState, AppDispatch } from \"./redux/store\"\r\n+import { toast } from \"react-toastify\"\r\n+import { FaTrash, FaEdit } from \"react-icons/fa\"\r\n+\r\n const HomePage = () => {\r\n-  const dispatch = useDispatch<AppDispatch>();\r\n-  const { items, loading, error } = useSelector(\r\n-    (state: RootState) => state.products\r\n-  );\r\n-  const [selectedCategory, setSelectedCategory] = useState(\"All\");\r\n-  const allCategories = [\"All\", ...new Set(items.map((item) => item.category))];\r\n+  const dispatch = useDispatch<AppDispatch>()\r\n+  const { items, loading, error } = useSelector((state: RootState) => state.products)\r\n+  const [selectedCategory, setSelectedCategory] = useState(\"All\")\r\n+  const allCategories = [\"All\", ...new Set(items.map((item) => item?.category || \"Uncategorized\"))]\r\n \r\n-  const [isEditing, setIsEditing] = useState(false);\r\n-  const [editingId, setEditingId] = useState<number | null>(null);\r\n-  const [searchQuery, setSearchQuery] = useState(\"\");\r\n-  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000]);\r\n+  const [isEditing, setIsEditing] = useState(false)\r\n+  const [editingId, setEditingId] = useState<number | null>(null)\r\n+  const [searchQuery, setSearchQuery] = useState(\"\")\r\n+  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000])\r\n \r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n-  const [productToDelete, setProductToDelete] = useState<number | null>(null);\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false)\r\n+  const [productToDelete, setProductToDelete] = useState<number | null>(null)\r\n   const [newProduct, setNewProduct] = useState({\r\n     title: \"\",\r\n     price: \"\",\r\n     description: \"\",\r\n     image: \"\",\r\n     category: \"\",\r\n-  });\r\n-  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n-  const [currentPage, setCurrentPage] = useState(1);\r\n-  const itemsPerPage = 8; // You can adjust this number\r\n+  })\r\n+  const [formErrors, setFormErrors] = useState<Record<string, string>>({})\r\n+  const [currentPage, setCurrentPage] = useState(1)\r\n+  const itemsPerPage = 8 // You can adjust this number\r\n \r\n   useEffect(() => {\r\n-    dispatch(fetchProducts());\r\n-  }, [dispatch]);\r\n+    dispatch(fetchProducts())\r\n+  }, [dispatch])\r\n \r\n   useEffect(() => {\r\n-    setCurrentPage(1);\r\n-  }, [searchQuery, priceRange, selectedCategory]);\r\n+    setCurrentPage(1)\r\n+  }, [searchQuery, priceRange, selectedCategory])\r\n \r\n-  const handleInputChange = (\r\n-    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n-  ) => {\r\n-    const { name, value } = e.target;\r\n-    setNewProduct((prev) => ({ ...prev, [name]: value }));\r\n-  };\r\n+  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n+    const { name, value } = e.target\r\n+    setNewProduct((prev) => ({ ...prev, [name]: value }))\r\n+  }\r\n \r\n   const validateForm = () => {\r\n-    const errors: Record<string, string> = {};\r\n-    if (!newProduct.title) errors.title = \"Title is required\";\r\n-    if (!newProduct.price) errors.price = \"Price is required\";\r\n-    if (!newProduct.description) errors.description = \"Description is required\";\r\n-    if (!newProduct.image) errors.image = \"Image URL is required\";\r\n-    if (!newProduct.category) errors.category = \"Category is required\";\r\n+    const errors: Record<string, string> = {}\r\n+    if (!newProduct.title) errors.title = \"Title is required\"\r\n+    if (!newProduct.price) errors.price = \"Price is required\"\r\n+    if (!newProduct.description) errors.description = \"Description is required\"\r\n+    if (!newProduct.image) errors.image = \"Image URL is required\"\r\n+    if (!newProduct.category) errors.category = \"Category is required\"\r\n \r\n-    setFormErrors(errors);\r\n-    return Object.keys(errors).length === 0;\r\n-  };\r\n+    setFormErrors(errors)\r\n+    return Object.keys(errors).length === 0\r\n+  }\r\n \r\n   const handleSubmit = async (e: React.FormEvent) => {\r\n-    e.preventDefault();\r\n-    if (!validateForm()) return;\r\n+    e.preventDefault()\r\n+    if (!validateForm()) return\r\n \r\n     try {\r\n       if (isEditing && editingId !== null) {\r\n         await dispatch(\r\n           updateProduct({\r\n             ...newProduct,\r\n             id: editingId,\r\n-            price: parseFloat(newProduct.price),\r\n-          })\r\n-        ).unwrap();\r\n-        toast.success(\"Product updated successfully!\");\r\n+            price: Number.parseFloat(newProduct.price),\r\n+          }),\r\n+        ).unwrap()\r\n+        toast.success(\"Product updated successfully!\")\r\n       } else {\r\n         await dispatch(\r\n           createProduct({\r\n             ...newProduct,\r\n-            price: parseFloat(newProduct.price),\r\n-          })\r\n-        ).unwrap();\r\n-        toast.success(\"Product created successfully!\");\r\n+            price: Number.parseFloat(newProduct.price),\r\n+          }),\r\n+        ).unwrap()\r\n+        toast.success(\"Product created successfully!\")\r\n       }\r\n \r\n-      setIsModalOpen(false);\r\n+      setIsModalOpen(false)\r\n       setNewProduct({\r\n         title: \"\",\r\n         price: \"\",\r\n         description: \"\",\r\n         image: \"\",\r\n         category: \"\",\r\n-      });\r\n-      setIsEditing(false);\r\n-      setEditingId(null);\r\n+      })\r\n+      setIsEditing(false)\r\n+      setEditingId(null)\r\n     } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\r\n-        isEditing ? \"Failed to update product.\" : \"Failed to create product.\"\r\n-      );\r\n+      console.error(err)\r\n+      toast.error(isEditing ? \"Failed to update product.\" : \"Failed to create product.\")\r\n     }\r\n \r\n-    setCurrentPage(1); // Show the first page immediately after adding\r\n+    setCurrentPage(1) // Show the first page immediately after adding\r\n+  }\r\n \r\n-  };\r\n-\r\n   const handleDelete = async (id: number) => {\r\n-    setProductToDelete(id);\r\n-    setIsDeleteModalOpen(true);\r\n-  };\r\n+    setProductToDelete(id)\r\n+    setIsDeleteModalOpen(true)\r\n+  }\r\n \r\n   const confirmDelete = async () => {\r\n-    if (productToDelete === null) return;\r\n-    \r\n+    if (productToDelete === null) return\r\n+\r\n     try {\r\n-      await dispatch(deleteProduct(productToDelete)).unwrap();\r\n-      toast.success(\"Product deleted!\");\r\n+      await dispatch(deleteProduct(productToDelete)).unwrap()\r\n+      toast.success(\"Product deleted!\")\r\n     } catch (error) {\r\n-      toast.error(\"Failed to delete product.\");\r\n+      toast.error(\"Failed to delete product.\")\r\n     } finally {\r\n-      setIsDeleteModalOpen(false);\r\n-      setProductToDelete(null);\r\n+      setIsDeleteModalOpen(false)\r\n+      setProductToDelete(null)\r\n     }\r\n-  };\r\n+  }\r\n \r\n   const handleEdit = (product: any) => {\r\n+    if (!product) return\r\n+\r\n     setNewProduct({\r\n-      title: product.title,\r\n-      price: String(product.price),\r\n-      description: product.description,\r\n-      image: product.image,\r\n-      category: product.category,\r\n-    });\r\n-    setEditingId(product.id);\r\n-    setIsEditing(true);\r\n-    setIsModalOpen(true);\r\n-  };\r\n+      title: product.title || \"\",\r\n+      price: String(product.price || 0),\r\n+      description: product.description || \"\",\r\n+      image: product.image || \"\",\r\n+      category: product.category || \"\",\r\n+    })\r\n+    setEditingId(product.id)\r\n+    setIsEditing(true)\r\n+    setIsModalOpen(true)\r\n+  }\r\n \r\n-  const filteredProducts = [...items]\r\n-  .sort((a, b) => b.id - a.id)\r\n-  .filter((product) => {\r\n-    const matchesSearch = product.title\r\n-      .toLowerCase()\r\n-      .includes(searchQuery.toLowerCase());\r\n+  const filteredProducts = [...(items || [])]\r\n+    .sort((a, b) => (b?.id || 0) - (a?.id || 0))\r\n+    .filter((product) => {\r\n+      if (!product) return false\r\n \r\n-    const matchesPrice =\r\n-      product.price >= priceRange[0] && product.price <= priceRange[1];\r\n+      const matchesSearch = (product.title || \"\").toLowerCase().includes(searchQuery.toLowerCase())\r\n \r\n-    const matchesCategory =\r\n-      selectedCategory === \"All\" || product.category === selectedCategory;\r\n+      const matchesPrice = (product.price || 0) >= priceRange[0] && (product.price || 0) <= priceRange[1]\r\n \r\n-    return matchesSearch && matchesPrice && matchesCategory;\r\n-  });\r\n+      const matchesCategory = selectedCategory === \"All\" || product.category === selectedCategory\r\n \r\n+      return matchesSearch && matchesPrice && matchesCategory\r\n+    })\r\n \r\n-  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);\r\n-  const paginatedProducts = filteredProducts.slice(\r\n-    (currentPage - 1) * itemsPerPage,\r\n-    currentPage * itemsPerPage\r\n-  );\r\n+  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage)\r\n+  const paginatedProducts = filteredProducts.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\r\n \r\n+  // Inline ProductCard component with null checks\r\n+  const renderProductCard = (product: any) => {\r\n+    if (!product) {\r\n+      return <div className=\"border rounded-lg p-4 shadow text-center\">Product data unavailable</div>\r\n+    }\r\n+\r\n+    return (\r\n+      <div className=\"border rounded-lg p-4 shadow hover:shadow-md transition relative\">\r\n+        <div className=\"absolute top-2 right-2 flex gap-2\">\r\n+          <button onClick={() => handleEdit(product)} className=\"text-blue-600 hover:text-blue-800\">\r\n+            <FaEdit />\r\n+          </button>\r\n+          <button onClick={() => product.id && handleDelete(product.id)} className=\"text-red-600 hover:text-red-800\">\r\n+            <FaTrash />\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"w-full h-40 flex items-center justify-center overflow-hidden\">\r\n+          {product.image ? (\r\n+            <img\r\n+              src={product.image || \"/placeholder.svg\"}\r\n+              alt={product.title || \"Product\"}\r\n+              className=\"w-full h-full object-contain pt-3\"\r\n+              onError={(e) => {\r\n+                ;(e.target as HTMLImageElement).src = \"/placeholder.svg\"\r\n+              }}\r\n+            />\r\n+          ) : (\r\n+            <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\r\n+              <span className=\"text-gray-400\">No image</span>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+        <h2 className=\"font-semibold text-lg mt-2\">{product.title || \"Untitled Product\"}</h2>\r\n+        <p className=\"text-gray-600\">${(product.price || 0).toFixed(2)}</p>\r\n+      </div>\r\n+    )\r\n+  }\r\n+\r\n   return (\r\n     <div className=\"p-6\">\r\n       <div className=\"flex justify-between items-center mb-4\">\r\n         <h1 className=\"text-2xl font-bold\">Products</h1>\r\n@@ -206,21 +232,17 @@\n             <label className=\"text-sm text-gray-700\">Min:</label>\r\n             <input\r\n               type=\"number\"\r\n               value={priceRange[0]}\r\n-              onChange={(e) =>\r\n-                setPriceRange([parseFloat(e.target.value) || 0, priceRange[1]])\r\n-              }\r\n+              onChange={(e) => setPriceRange([Number.parseFloat(e.target.value) || 0, priceRange[1]])}\r\n               className=\"w-20 p-1 border rounded\"\r\n               min={0}\r\n             />\r\n             <label className=\"text-sm text-gray-700\">Max:</label>\r\n             <input\r\n               type=\"number\"\r\n               value={priceRange[1]}\r\n-              onChange={(e) =>\r\n-                setPriceRange([priceRange[0], parseFloat(e.target.value) || 0])\r\n-              }\r\n+              onChange={(e) => setPriceRange([priceRange[0], Number.parseFloat(e.target.value) || 0])}\r\n               className=\"w-20 p-1 border rounded\"\r\n               min={0}\r\n             />\r\n           </div>\r\n@@ -229,19 +251,20 @@\n \r\n       {loading && <p>Loading...</p>}\r\n       {error && <p className=\"text-red-500\">{error}</p>}\r\n \r\n-      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n-        {paginatedProducts.map((product:Product) => (\r\n-          <div className=\"border border-red-500\">\r\n-            <ProductCard\r\n-              key={product.id}\r\n-              product={product}\r\n-              onEdit={handleEdit}\r\n-              onDelete={handleDelete}\r\n-            />\r\n+      <div className=\"flex flex-col md:grid md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n+        {paginatedProducts.length > 0 ? (\r\n+          paginatedProducts.map((product: any) => (\r\n+            <div key={product?.id || Math.random()} className=\"mb-4 md:mb-0\">\r\n+              {renderProductCard(product)}\r\n+            </div>\r\n+          ))\r\n+        ) : (\r\n+          <div className=\"col-span-full text-center py-8\">\r\n+            <p className=\"text-gray-500\">No products found matching your criteria</p>\r\n           </div>\r\n-        ))}\r\n+        )}\r\n       </div>\r\n \r\n       {totalPages > 1 && (\r\n         <div className=\"flex justify-center mt-6 space-x-2\">\r\n@@ -249,11 +272,9 @@\n             <button\r\n               key={page}\r\n               onClick={() => setCurrentPage(page)}\r\n               className={`px-3 py-1 rounded ${\r\n-                page === currentPage\r\n-                  ? \"bg-blue-600 text-white\"\r\n-                  : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n+                page === currentPage ? \"bg-blue-600 text-white\" : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n               }`}\r\n             >\r\n               {page}\r\n             </button>\r\n@@ -265,11 +286,9 @@\n       {isModalOpen && (\r\n         <div className=\"fixed inset-0 bg-white/30 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\r\n           <div className=\"bg-white/90 backdrop-blur-md rounded-xl shadow-xl p-6 w-full max-w-md relative border border-gray-200\">\r\n             <div className=\"flex justify-between items-center mb-4\">\r\n-              <h2 className=\"text-xl font-bold text-gray-800\">\r\n-                {isEditing ? \"Edit Product\" : \"Add New Product\"}\r\n-              </h2>\r\n+              <h2 className=\"text-xl font-bold text-gray-800\">{isEditing ? \"Edit Product\" : \"Add New Product\"}</h2>\r\n               <button\r\n                 onClick={() => setIsModalOpen(false)}\r\n                 className=\"text-gray-500 hover:text-gray-700 text-xl font-bold\"\r\n               >\r\n@@ -278,109 +297,69 @@\n             </div>\r\n \r\n             <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Title*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Title*</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"title\"\r\n                   value={newProduct.title}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.title ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.title ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                 />\r\n-                {formErrors.title && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.title}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.title && <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Price*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Price*</label>\r\n                 <input\r\n                   type=\"number\"\r\n                   name=\"price\"\r\n                   value={newProduct.price}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.price ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.price ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                   min=\"0\"\r\n                   step=\"0.01\"\r\n                 />\r\n-                {formErrors.price && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.price}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.price && <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Description*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description*</label>\r\n                 <textarea\r\n                   name=\"description\"\r\n                   value={newProduct.description}\r\n                   onChange={handleInputChange}\r\n                   className={`w-full p-2 border rounded ${\r\n-                    formErrors.description\r\n-                      ? \"border-red-500\"\r\n-                      : \"border-gray-300\"\r\n+                    formErrors.description ? \"border-red-500\" : \"border-gray-300\"\r\n                   }`}\r\n                   rows={3}\r\n                 />\r\n-                {formErrors.description && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.description}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.description && <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Image URL*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Image URL*</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"image\"\r\n                   value={newProduct.image}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.image ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.image ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                 />\r\n-                {formErrors.image && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.image}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.image && <p className=\"text-red-500 text-sm mt-1\">{formErrors.image}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Category*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Category*</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"category\"\r\n                   value={newProduct.category}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.category ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.category ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                 />\r\n-                {formErrors.category && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.category}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.category && <p className=\"text-red-500 text-sm mt-1\">{formErrors.category}</p>}\r\n               </div>\r\n \r\n               <div className=\"flex justify-end space-x-3 pt-4\">\r\n                 <button\r\n@@ -389,12 +368,9 @@\n                   className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n                 >\r\n                   Cancel\r\n                 </button>\r\n-                <button\r\n-                  type=\"submit\"\r\n-                  className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n-                >\r\n+                <button type=\"submit\" className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\r\n                   {isEditing ? \"Update Product\" : \"Create Product\"}\r\n                 </button>\r\n               </div>\r\n             </form>\r\n@@ -422,19 +398,16 @@\n                 className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n               >\r\n                 No\r\n               </button>\r\n-              <button\r\n-                onClick={confirmDelete}\r\n-                className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n-              >\r\n+              <button onClick={confirmDelete} className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\">\r\n                 Yes, Delete\r\n               </button>\r\n             </div>\r\n           </div>\r\n         </div>\r\n       )}\r\n     </div>\r\n-  );\r\n-};\r\n+  )\r\n+}\r\n \r\n-export default HomePage;\r\n+export default HomePage\r\n"
                },
                {
                    "date": 1747979381614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,196 +1,170 @@\n-\"use client\"\r\n-\r\n-import type React from \"react\"\r\n-\r\n-import { useEffect, useState } from \"react\"\r\n-import { useDispatch, useSelector } from \"react-redux\"\r\n-import { fetchProducts, createProduct, updateProduct, deleteProduct } from \"./redux/productsSlice\"\r\n-import type { RootState, AppDispatch } from \"./redux/store\"\r\n-import { toast } from \"react-toastify\"\r\n-import { FaTrash, FaEdit } from \"react-icons/fa\"\r\n-\r\n+import { useEffect, useState } from \"react\";\r\n+import { useDispatch, useSelector } from \"react-redux\";\r\n+import {\r\n+  fetchProducts,\r\n+  createProduct,\r\n+  updateProduct,\r\n+  deleteProduct,\r\n+} from \"../redux/productsSlice\";\r\n+import type { RootState, AppDispatch } from \"../redux/store\";\r\n+import ProductCard from \"../components/ProductCard\";\r\n+import { toast } from \"react-toastify\";\r\n+import type { Product } from \"../types/product\";\r\n const HomePage = () => {\r\n-  const dispatch = useDispatch<AppDispatch>()\r\n-  const { items, loading, error } = useSelector((state: RootState) => state.products)\r\n-  const [selectedCategory, setSelectedCategory] = useState(\"All\")\r\n-  const allCategories = [\"All\", ...new Set(items.map((item) => item?.category || \"Uncategorized\"))]\r\n+  const dispatch = useDispatch<AppDispatch>();\r\n+  const { items, loading, error } = useSelector(\r\n+    (state: RootState) => state.products\r\n+  );\r\n+  const [selectedCategory, setSelectedCategory] = useState(\"All\");\r\n+  const allCategories = [\"All\", ...new Set(items.map((item) => item.category))];\r\n \r\n-  const [isEditing, setIsEditing] = useState(false)\r\n-  const [editingId, setEditingId] = useState<number | null>(null)\r\n-  const [searchQuery, setSearchQuery] = useState(\"\")\r\n-  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000])\r\n+  const [isEditing, setIsEditing] = useState(false);\r\n+  const [editingId, setEditingId] = useState<number | null>(null);\r\n+  const [searchQuery, setSearchQuery] = useState(\"\");\r\n+  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000]);\r\n \r\n-  const [isModalOpen, setIsModalOpen] = useState(false)\r\n-  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false)\r\n-  const [productToDelete, setProductToDelete] = useState<number | null>(null)\r\n+  const [isModalOpen, setIsModalOpen] = useState(false);\r\n+  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n+  const [productToDelete, setProductToDelete] = useState<number | null>(null);\r\n   const [newProduct, setNewProduct] = useState({\r\n     title: \"\",\r\n     price: \"\",\r\n     description: \"\",\r\n     image: \"\",\r\n     category: \"\",\r\n-  })\r\n-  const [formErrors, setFormErrors] = useState<Record<string, string>>({})\r\n-  const [currentPage, setCurrentPage] = useState(1)\r\n-  const itemsPerPage = 8 // You can adjust this number\r\n+  });\r\n+  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const itemsPerPage = 8; // You can adjust this number\r\n \r\n   useEffect(() => {\r\n-    dispatch(fetchProducts())\r\n-  }, [dispatch])\r\n+    dispatch(fetchProducts());\r\n+  }, [dispatch]);\r\n \r\n   useEffect(() => {\r\n-    setCurrentPage(1)\r\n-  }, [searchQuery, priceRange, selectedCategory])\r\n+    setCurrentPage(1);\r\n+  }, [searchQuery, priceRange, selectedCategory]);\r\n \r\n-  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n-    const { name, value } = e.target\r\n-    setNewProduct((prev) => ({ ...prev, [name]: value }))\r\n-  }\r\n+  const handleInputChange = (\r\n+    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n+  ) => {\r\n+    const { name, value } = e.target;\r\n+    setNewProduct((prev) => ({ ...prev, [name]: value }));\r\n+  };\r\n \r\n   const validateForm = () => {\r\n-    const errors: Record<string, string> = {}\r\n-    if (!newProduct.title) errors.title = \"Title is required\"\r\n-    if (!newProduct.price) errors.price = \"Price is required\"\r\n-    if (!newProduct.description) errors.description = \"Description is required\"\r\n-    if (!newProduct.image) errors.image = \"Image URL is required\"\r\n-    if (!newProduct.category) errors.category = \"Category is required\"\r\n+    const errors: Record<string, string> = {};\r\n+    if (!newProduct.title) errors.title = \"Title is required\";\r\n+    if (!newProduct.price) errors.price = \"Price is required\";\r\n+    if (!newProduct.description) errors.description = \"Description is required\";\r\n+    if (!newProduct.image) errors.image = \"Image URL is required\";\r\n+    if (!newProduct.category) errors.category = \"Category is required\";\r\n \r\n-    setFormErrors(errors)\r\n-    return Object.keys(errors).length === 0\r\n-  }\r\n+    setFormErrors(errors);\r\n+    return Object.keys(errors).length === 0;\r\n+  };\r\n \r\n   const handleSubmit = async (e: React.FormEvent) => {\r\n-    e.preventDefault()\r\n-    if (!validateForm()) return\r\n+    e.preventDefault();\r\n+    if (!validateForm()) return;\r\n \r\n     try {\r\n       if (isEditing && editingId !== null) {\r\n         await dispatch(\r\n           updateProduct({\r\n             ...newProduct,\r\n             id: editingId,\r\n-            price: Number.parseFloat(newProduct.price),\r\n-          }),\r\n-        ).unwrap()\r\n-        toast.success(\"Product updated successfully!\")\r\n+            price: parseFloat(newProduct.price),\r\n+          })\r\n+        ).unwrap();\r\n+        toast.success(\"Product updated successfully!\");\r\n       } else {\r\n         await dispatch(\r\n           createProduct({\r\n             ...newProduct,\r\n-            price: Number.parseFloat(newProduct.price),\r\n-          }),\r\n-        ).unwrap()\r\n-        toast.success(\"Product created successfully!\")\r\n+            price: parseFloat(newProduct.price),\r\n+          })\r\n+        ).unwrap();\r\n+        toast.success(\"Product created successfully!\");\r\n       }\r\n \r\n-      setIsModalOpen(false)\r\n+      setIsModalOpen(false);\r\n       setNewProduct({\r\n         title: \"\",\r\n         price: \"\",\r\n         description: \"\",\r\n         image: \"\",\r\n         category: \"\",\r\n-      })\r\n-      setIsEditing(false)\r\n-      setEditingId(null)\r\n+      });\r\n+      setIsEditing(false);\r\n+      setEditingId(null);\r\n     } catch (err) {\r\n-      console.error(err)\r\n-      toast.error(isEditing ? \"Failed to update product.\" : \"Failed to create product.\")\r\n+      console.error(err);\r\n+      toast.error(\r\n+        isEditing ? \"Failed to update product.\" : \"Failed to create product.\"\r\n+      );\r\n     }\r\n \r\n-    setCurrentPage(1) // Show the first page immediately after adding\r\n-  }\r\n+    setCurrentPage(1); // Show the first page immediately after adding\r\n \r\n+  };\r\n+\r\n   const handleDelete = async (id: number) => {\r\n-    setProductToDelete(id)\r\n-    setIsDeleteModalOpen(true)\r\n-  }\r\n+    setProductToDelete(id);\r\n+    setIsDeleteModalOpen(true);\r\n+  };\r\n \r\n   const confirmDelete = async () => {\r\n-    if (productToDelete === null) return\r\n-\r\n+    if (productToDelete === null) return;\r\n+    \r\n     try {\r\n-      await dispatch(deleteProduct(productToDelete)).unwrap()\r\n-      toast.success(\"Product deleted!\")\r\n+      await dispatch(deleteProduct(productToDelete)).unwrap();\r\n+      toast.success(\"Product deleted!\");\r\n     } catch (error) {\r\n-      toast.error(\"Failed to delete product.\")\r\n+      toast.error(\"Failed to delete product.\");\r\n     } finally {\r\n-      setIsDeleteModalOpen(false)\r\n-      setProductToDelete(null)\r\n+      setIsDeleteModalOpen(false);\r\n+      setProductToDelete(null);\r\n     }\r\n-  }\r\n+  };\r\n \r\n   const handleEdit = (product: any) => {\r\n-    if (!product) return\r\n-\r\n     setNewProduct({\r\n-      title: product.title || \"\",\r\n-      price: String(product.price || 0),\r\n-      description: product.description || \"\",\r\n-      image: product.image || \"\",\r\n-      category: product.category || \"\",\r\n-    })\r\n-    setEditingId(product.id)\r\n-    setIsEditing(true)\r\n-    setIsModalOpen(true)\r\n-  }\r\n+      title: product.title,\r\n+      price: String(product.price),\r\n+      description: product.description,\r\n+      image: product.image,\r\n+      category: product.category,\r\n+    });\r\n+    setEditingId(product.id);\r\n+    setIsEditing(true);\r\n+    setIsModalOpen(true);\r\n+  };\r\n \r\n-  const filteredProducts = [...(items || [])]\r\n-    .sort((a, b) => (b?.id || 0) - (a?.id || 0))\r\n-    .filter((product) => {\r\n-      if (!product) return false\r\n+  const filteredProducts = [...items]\r\n+  .sort((a, b) => b.id - a.id)\r\n+  .filter((product) => {\r\n+    const matchesSearch = product.title\r\n+      .toLowerCase()\r\n+      .includes(searchQuery.toLowerCase());\r\n \r\n-      const matchesSearch = (product.title || \"\").toLowerCase().includes(searchQuery.toLowerCase())\r\n+    const matchesPrice =\r\n+      product.price >= priceRange[0] && product.price <= priceRange[1];\r\n \r\n-      const matchesPrice = (product.price || 0) >= priceRange[0] && (product.price || 0) <= priceRange[1]\r\n+    const matchesCategory =\r\n+      selectedCategory === \"All\" || product.category === selectedCategory;\r\n \r\n-      const matchesCategory = selectedCategory === \"All\" || product.category === selectedCategory\r\n+    return matchesSearch && matchesPrice && matchesCategory;\r\n+  });\r\n \r\n-      return matchesSearch && matchesPrice && matchesCategory\r\n-    })\r\n \r\n-  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage)\r\n-  const paginatedProducts = filteredProducts.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\r\n+  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);\r\n+  const paginatedProducts = filteredProducts.slice(\r\n+    (currentPage - 1) * itemsPerPage,\r\n+    currentPage * itemsPerPage\r\n+  );\r\n \r\n-  // Inline ProductCard component with null checks\r\n-  const renderProductCard = (product: any) => {\r\n-    if (!product) {\r\n-      return <div className=\"border rounded-lg p-4 shadow text-center\">Product data unavailable</div>\r\n-    }\r\n-\r\n-    return (\r\n-      <div className=\"border rounded-lg p-4 shadow hover:shadow-md transition relative\">\r\n-        <div className=\"absolute top-2 right-2 flex gap-2\">\r\n-          <button onClick={() => handleEdit(product)} className=\"text-blue-600 hover:text-blue-800\">\r\n-            <FaEdit />\r\n-          </button>\r\n-          <button onClick={() => product.id && handleDelete(product.id)} className=\"text-red-600 hover:text-red-800\">\r\n-            <FaTrash />\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"w-full h-40 flex items-center justify-center overflow-hidden\">\r\n-          {product.image ? (\r\n-            <img\r\n-              src={product.image || \"/placeholder.svg\"}\r\n-              alt={product.title || \"Product\"}\r\n-              className=\"w-full h-full object-contain pt-3\"\r\n-              onError={(e) => {\r\n-                ;(e.target as HTMLImageElement).src = \"/placeholder.svg\"\r\n-              }}\r\n-            />\r\n-          ) : (\r\n-            <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\r\n-              <span className=\"text-gray-400\">No image</span>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-        <h2 className=\"font-semibold text-lg mt-2\">{product.title || \"Untitled Product\"}</h2>\r\n-        <p className=\"text-gray-600\">${(product.price || 0).toFixed(2)}</p>\r\n-      </div>\r\n-    )\r\n-  }\r\n-\r\n   return (\r\n     <div className=\"p-6\">\r\n       <div className=\"flex justify-between items-center mb-4\">\r\n         <h1 className=\"text-2xl font-bold\">Products</h1>\r\n@@ -232,17 +206,21 @@\n             <label className=\"text-sm text-gray-700\">Min:</label>\r\n             <input\r\n               type=\"number\"\r\n               value={priceRange[0]}\r\n-              onChange={(e) => setPriceRange([Number.parseFloat(e.target.value) || 0, priceRange[1]])}\r\n+              onChange={(e) =>\r\n+                setPriceRange([parseFloat(e.target.value) || 0, priceRange[1]])\r\n+              }\r\n               className=\"w-20 p-1 border rounded\"\r\n               min={0}\r\n             />\r\n             <label className=\"text-sm text-gray-700\">Max:</label>\r\n             <input\r\n               type=\"number\"\r\n               value={priceRange[1]}\r\n-              onChange={(e) => setPriceRange([priceRange[0], Number.parseFloat(e.target.value) || 0])}\r\n+              onChange={(e) =>\r\n+                setPriceRange([priceRange[0], parseFloat(e.target.value) || 0])\r\n+              }\r\n               className=\"w-20 p-1 border rounded\"\r\n               min={0}\r\n             />\r\n           </div>\r\n@@ -251,20 +229,19 @@\n \r\n       {loading && <p>Loading...</p>}\r\n       {error && <p className=\"text-red-500\">{error}</p>}\r\n \r\n-      <div className=\"flex flex-col md:grid md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n-        {paginatedProducts.length > 0 ? (\r\n-          paginatedProducts.map((product: any) => (\r\n-            <div key={product?.id || Math.random()} className=\"mb-4 md:mb-0\">\r\n-              {renderProductCard(product)}\r\n-            </div>\r\n-          ))\r\n-        ) : (\r\n-          <div className=\"col-span-full text-center py-8\">\r\n-            <p className=\"text-gray-500\">No products found matching your criteria</p>\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n+        {paginatedProducts.map((product:Product) => (\r\n+          <div className=\"border border-red-500\">\r\n+            <ProductCard\r\n+              key={product.id}\r\n+              product={product}\r\n+              onEdit={handleEdit}\r\n+              onDelete={handleDelete}\r\n+            />\r\n           </div>\r\n-        )}\r\n+        ))}\r\n       </div>\r\n \r\n       {totalPages > 1 && (\r\n         <div className=\"flex justify-center mt-6 space-x-2\">\r\n@@ -272,9 +249,11 @@\n             <button\r\n               key={page}\r\n               onClick={() => setCurrentPage(page)}\r\n               className={`px-3 py-1 rounded ${\r\n-                page === currentPage ? \"bg-blue-600 text-white\" : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n+                page === currentPage\r\n+                  ? \"bg-blue-600 text-white\"\r\n+                  : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n               }`}\r\n             >\r\n               {page}\r\n             </button>\r\n@@ -286,9 +265,11 @@\n       {isModalOpen && (\r\n         <div className=\"fixed inset-0 bg-white/30 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\r\n           <div className=\"bg-white/90 backdrop-blur-md rounded-xl shadow-xl p-6 w-full max-w-md relative border border-gray-200\">\r\n             <div className=\"flex justify-between items-center mb-4\">\r\n-              <h2 className=\"text-xl font-bold text-gray-800\">{isEditing ? \"Edit Product\" : \"Add New Product\"}</h2>\r\n+              <h2 className=\"text-xl font-bold text-gray-800\">\r\n+                {isEditing ? \"Edit Product\" : \"Add New Product\"}\r\n+              </h2>\r\n               <button\r\n                 onClick={() => setIsModalOpen(false)}\r\n                 className=\"text-gray-500 hover:text-gray-700 text-xl font-bold\"\r\n               >\r\n@@ -297,69 +278,109 @@\n             </div>\r\n \r\n             <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Title*</label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n+                  Title*\r\n+                </label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"title\"\r\n                   value={newProduct.title}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${formErrors.title ? \"border-red-500\" : \"border-gray-300\"}`}\r\n+                  className={`w-full p-2 border rounded ${\r\n+                    formErrors.title ? \"border-red-500\" : \"border-gray-300\"\r\n+                  }`}\r\n                 />\r\n-                {formErrors.title && <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>}\r\n+                {formErrors.title && (\r\n+                  <p className=\"text-red-500 text-sm mt-1\">\r\n+                    {formErrors.title}\r\n+                  </p>\r\n+                )}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Price*</label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n+                  Price*\r\n+                </label>\r\n                 <input\r\n                   type=\"number\"\r\n                   name=\"price\"\r\n                   value={newProduct.price}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${formErrors.price ? \"border-red-500\" : \"border-gray-300\"}`}\r\n+                  className={`w-full p-2 border rounded ${\r\n+                    formErrors.price ? \"border-red-500\" : \"border-gray-300\"\r\n+                  }`}\r\n                   min=\"0\"\r\n                   step=\"0.01\"\r\n                 />\r\n-                {formErrors.price && <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>}\r\n+                {formErrors.price && (\r\n+                  <p className=\"text-red-500 text-sm mt-1\">\r\n+                    {formErrors.price}\r\n+                  </p>\r\n+                )}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description*</label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n+                  Description*\r\n+                </label>\r\n                 <textarea\r\n                   name=\"description\"\r\n                   value={newProduct.description}\r\n                   onChange={handleInputChange}\r\n                   className={`w-full p-2 border rounded ${\r\n-                    formErrors.description ? \"border-red-500\" : \"border-gray-300\"\r\n+                    formErrors.description\r\n+                      ? \"border-red-500\"\r\n+                      : \"border-gray-300\"\r\n                   }`}\r\n                   rows={3}\r\n                 />\r\n-                {formErrors.description && <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>}\r\n+                {formErrors.description && (\r\n+                  <p className=\"text-red-500 text-sm mt-1\">\r\n+                    {formErrors.description}\r\n+                  </p>\r\n+                )}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Image URL*</label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n+                  Image URL*\r\n+                </label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"image\"\r\n                   value={newProduct.image}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${formErrors.image ? \"border-red-500\" : \"border-gray-300\"}`}\r\n+                  className={`w-full p-2 border rounded ${\r\n+                    formErrors.image ? \"border-red-500\" : \"border-gray-300\"\r\n+                  }`}\r\n                 />\r\n-                {formErrors.image && <p className=\"text-red-500 text-sm mt-1\">{formErrors.image}</p>}\r\n+                {formErrors.image && (\r\n+                  <p className=\"text-red-500 text-sm mt-1\">\r\n+                    {formErrors.image}\r\n+                  </p>\r\n+                )}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Category*</label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n+                  Category*\r\n+                </label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"category\"\r\n                   value={newProduct.category}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${formErrors.category ? \"border-red-500\" : \"border-gray-300\"}`}\r\n+                  className={`w-full p-2 border rounded ${\r\n+                    formErrors.category ? \"border-red-500\" : \"border-gray-300\"\r\n+                  }`}\r\n                 />\r\n-                {formErrors.category && <p className=\"text-red-500 text-sm mt-1\">{formErrors.category}</p>}\r\n+                {formErrors.category && (\r\n+                  <p className=\"text-red-500 text-sm mt-1\">\r\n+                    {formErrors.category}\r\n+                  </p>\r\n+                )}\r\n               </div>\r\n \r\n               <div className=\"flex justify-end space-x-3 pt-4\">\r\n                 <button\r\n@@ -368,9 +389,12 @@\n                   className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n                 >\r\n                   Cancel\r\n                 </button>\r\n-                <button type=\"submit\" className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\r\n+                <button\r\n+                  type=\"submit\"\r\n+                  className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n+                >\r\n                   {isEditing ? \"Update Product\" : \"Create Product\"}\r\n                 </button>\r\n               </div>\r\n             </form>\r\n@@ -398,16 +422,19 @@\n                 className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n               >\r\n                 No\r\n               </button>\r\n-              <button onClick={confirmDelete} className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\">\r\n+              <button\r\n+                onClick={confirmDelete}\r\n+                className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n+              >\r\n                 Yes, Delete\r\n               </button>\r\n             </div>\r\n           </div>\r\n         </div>\r\n       )}\r\n     </div>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n \r\n-export default HomePage\r\n+export default HomePage;\r\n"
                },
                {
                    "date": 1747979407986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,170 +1,196 @@\n-import { useEffect, useState } from \"react\";\r\n-import { useDispatch, useSelector } from \"react-redux\";\r\n-import {\r\n-  fetchProducts,\r\n-  createProduct,\r\n-  updateProduct,\r\n-  deleteProduct,\r\n-} from \"../redux/productsSlice\";\r\n-import type { RootState, AppDispatch } from \"../redux/store\";\r\n-import ProductCard from \"../components/ProductCard\";\r\n-import { toast } from \"react-toastify\";\r\n-import type { Product } from \"../types/product\";\r\n+\"use client\"\r\n+\r\n+import type React from \"react\"\r\n+\r\n+import { useEffect, useState } from \"react\"\r\n+import { useDispatch, useSelector } from \"react-redux\"\r\n+import { fetchProducts, createProduct, updateProduct, deleteProduct } from \"./redux/productsSlice\"\r\n+import type { RootState, AppDispatch } from \"./redux/store\"\r\n+import { toast } from \"react-toastify\"\r\n+import { FaTrash, FaEdit } from \"react-icons/fa\"\r\n+\r\n const HomePage = () => {\r\n-  const dispatch = useDispatch<AppDispatch>();\r\n-  const { items, loading, error } = useSelector(\r\n-    (state: RootState) => state.products\r\n-  );\r\n-  const [selectedCategory, setSelectedCategory] = useState(\"All\");\r\n-  const allCategories = [\"All\", ...new Set(items.map((item) => item.category))];\r\n+  const dispatch = useDispatch<AppDispatch>()\r\n+  const { items, loading, error } = useSelector((state: RootState) => state.products)\r\n+  const [selectedCategory, setSelectedCategory] = useState(\"All\")\r\n+  const allCategories = [\"All\", ...new Set(items.map((item) => item?.category || \"Uncategorized\"))]\r\n \r\n-  const [isEditing, setIsEditing] = useState(false);\r\n-  const [editingId, setEditingId] = useState<number | null>(null);\r\n-  const [searchQuery, setSearchQuery] = useState(\"\");\r\n-  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000]);\r\n+  const [isEditing, setIsEditing] = useState(false)\r\n+  const [editingId, setEditingId] = useState<number | null>(null)\r\n+  const [searchQuery, setSearchQuery] = useState(\"\")\r\n+  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000])\r\n \r\n-  const [isModalOpen, setIsModalOpen] = useState(false);\r\n-  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n-  const [productToDelete, setProductToDelete] = useState<number | null>(null);\r\n+  const [isModalOpen, setIsModalOpen] = useState(false)\r\n+  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false)\r\n+  const [productToDelete, setProductToDelete] = useState<number | null>(null)\r\n   const [newProduct, setNewProduct] = useState({\r\n     title: \"\",\r\n     price: \"\",\r\n     description: \"\",\r\n     image: \"\",\r\n     category: \"\",\r\n-  });\r\n-  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n-  const [currentPage, setCurrentPage] = useState(1);\r\n-  const itemsPerPage = 8; // You can adjust this number\r\n+  })\r\n+  const [formErrors, setFormErrors] = useState<Record<string, string>>({})\r\n+  const [currentPage, setCurrentPage] = useState(1)\r\n+  const itemsPerPage = 8 // You can adjust this number\r\n \r\n   useEffect(() => {\r\n-    dispatch(fetchProducts());\r\n-  }, [dispatch]);\r\n+    dispatch(fetchProducts())\r\n+  }, [dispatch])\r\n \r\n   useEffect(() => {\r\n-    setCurrentPage(1);\r\n-  }, [searchQuery, priceRange, selectedCategory]);\r\n+    setCurrentPage(1)\r\n+  }, [searchQuery, priceRange, selectedCategory])\r\n \r\n-  const handleInputChange = (\r\n-    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n-  ) => {\r\n-    const { name, value } = e.target;\r\n-    setNewProduct((prev) => ({ ...prev, [name]: value }));\r\n-  };\r\n+  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n+    const { name, value } = e.target\r\n+    setNewProduct((prev) => ({ ...prev, [name]: value }))\r\n+  }\r\n \r\n   const validateForm = () => {\r\n-    const errors: Record<string, string> = {};\r\n-    if (!newProduct.title) errors.title = \"Title is required\";\r\n-    if (!newProduct.price) errors.price = \"Price is required\";\r\n-    if (!newProduct.description) errors.description = \"Description is required\";\r\n-    if (!newProduct.image) errors.image = \"Image URL is required\";\r\n-    if (!newProduct.category) errors.category = \"Category is required\";\r\n+    const errors: Record<string, string> = {}\r\n+    if (!newProduct.title) errors.title = \"Title is required\"\r\n+    if (!newProduct.price) errors.price = \"Price is required\"\r\n+    if (!newProduct.description) errors.description = \"Description is required\"\r\n+    if (!newProduct.image) errors.image = \"Image URL is required\"\r\n+    if (!newProduct.category) errors.category = \"Category is required\"\r\n \r\n-    setFormErrors(errors);\r\n-    return Object.keys(errors).length === 0;\r\n-  };\r\n+    setFormErrors(errors)\r\n+    return Object.keys(errors).length === 0\r\n+  }\r\n \r\n   const handleSubmit = async (e: React.FormEvent) => {\r\n-    e.preventDefault();\r\n-    if (!validateForm()) return;\r\n+    e.preventDefault()\r\n+    if (!validateForm()) return\r\n \r\n     try {\r\n       if (isEditing && editingId !== null) {\r\n         await dispatch(\r\n           updateProduct({\r\n             ...newProduct,\r\n             id: editingId,\r\n-            price: parseFloat(newProduct.price),\r\n-          })\r\n-        ).unwrap();\r\n-        toast.success(\"Product updated successfully!\");\r\n+            price: Number.parseFloat(newProduct.price),\r\n+          }),\r\n+        ).unwrap()\r\n+        toast.success(\"Product updated successfully!\")\r\n       } else {\r\n         await dispatch(\r\n           createProduct({\r\n             ...newProduct,\r\n-            price: parseFloat(newProduct.price),\r\n-          })\r\n-        ).unwrap();\r\n-        toast.success(\"Product created successfully!\");\r\n+            price: Number.parseFloat(newProduct.price),\r\n+          }),\r\n+        ).unwrap()\r\n+        toast.success(\"Product created successfully!\")\r\n       }\r\n \r\n-      setIsModalOpen(false);\r\n+      setIsModalOpen(false)\r\n       setNewProduct({\r\n         title: \"\",\r\n         price: \"\",\r\n         description: \"\",\r\n         image: \"\",\r\n         category: \"\",\r\n-      });\r\n-      setIsEditing(false);\r\n-      setEditingId(null);\r\n+      })\r\n+      setIsEditing(false)\r\n+      setEditingId(null)\r\n     } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\r\n-        isEditing ? \"Failed to update product.\" : \"Failed to create product.\"\r\n-      );\r\n+      console.error(err)\r\n+      toast.error(isEditing ? \"Failed to update product.\" : \"Failed to create product.\")\r\n     }\r\n \r\n-    setCurrentPage(1); // Show the first page immediately after adding\r\n+    setCurrentPage(1) // Show the first page immediately after adding\r\n+  }\r\n \r\n-  };\r\n-\r\n   const handleDelete = async (id: number) => {\r\n-    setProductToDelete(id);\r\n-    setIsDeleteModalOpen(true);\r\n-  };\r\n+    setProductToDelete(id)\r\n+    setIsDeleteModalOpen(true)\r\n+  }\r\n \r\n   const confirmDelete = async () => {\r\n-    if (productToDelete === null) return;\r\n-    \r\n+    if (productToDelete === null) return\r\n+\r\n     try {\r\n-      await dispatch(deleteProduct(productToDelete)).unwrap();\r\n-      toast.success(\"Product deleted!\");\r\n+      await dispatch(deleteProduct(productToDelete)).unwrap()\r\n+      toast.success(\"Product deleted!\")\r\n     } catch (error) {\r\n-      toast.error(\"Failed to delete product.\");\r\n+      toast.error(\"Failed to delete product.\")\r\n     } finally {\r\n-      setIsDeleteModalOpen(false);\r\n-      setProductToDelete(null);\r\n+      setIsDeleteModalOpen(false)\r\n+      setProductToDelete(null)\r\n     }\r\n-  };\r\n+  }\r\n \r\n   const handleEdit = (product: any) => {\r\n+    if (!product) return\r\n+\r\n     setNewProduct({\r\n-      title: product.title,\r\n-      price: String(product.price),\r\n-      description: product.description,\r\n-      image: product.image,\r\n-      category: product.category,\r\n-    });\r\n-    setEditingId(product.id);\r\n-    setIsEditing(true);\r\n-    setIsModalOpen(true);\r\n-  };\r\n+      title: product.title || \"\",\r\n+      price: String(product.price || 0),\r\n+      description: product.description || \"\",\r\n+      image: product.image || \"\",\r\n+      category: product.category || \"\",\r\n+    })\r\n+    setEditingId(product.id)\r\n+    setIsEditing(true)\r\n+    setIsModalOpen(true)\r\n+  }\r\n \r\n-  const filteredProducts = [...items]\r\n-  .sort((a, b) => b.id - a.id)\r\n-  .filter((product) => {\r\n-    const matchesSearch = product.title\r\n-      .toLowerCase()\r\n-      .includes(searchQuery.toLowerCase());\r\n+  const filteredProducts = [...(items || [])]\r\n+    .sort((a, b) => (b?.id || 0) - (a?.id || 0))\r\n+    .filter((product) => {\r\n+      if (!product) return false\r\n \r\n-    const matchesPrice =\r\n-      product.price >= priceRange[0] && product.price <= priceRange[1];\r\n+      const matchesSearch = (product.title || \"\").toLowerCase().includes(searchQuery.toLowerCase())\r\n \r\n-    const matchesCategory =\r\n-      selectedCategory === \"All\" || product.category === selectedCategory;\r\n+      const matchesPrice = (product.price || 0) >= priceRange[0] && (product.price || 0) <= priceRange[1]\r\n \r\n-    return matchesSearch && matchesPrice && matchesCategory;\r\n-  });\r\n+      const matchesCategory = selectedCategory === \"All\" || product.category === selectedCategory\r\n \r\n+      return matchesSearch && matchesPrice && matchesCategory\r\n+    })\r\n \r\n-  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);\r\n-  const paginatedProducts = filteredProducts.slice(\r\n-    (currentPage - 1) * itemsPerPage,\r\n-    currentPage * itemsPerPage\r\n-  );\r\n+  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage)\r\n+  const paginatedProducts = filteredProducts.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\r\n \r\n+  // Inline ProductCard component with null checks\r\n+  const renderProductCard = (product: any) => {\r\n+    if (!product) {\r\n+      return <div className=\"border rounded-lg p-4 shadow text-center\">Product data unavailable</div>\r\n+    }\r\n+\r\n+    return (\r\n+      <div className=\"border rounded-lg p-4 shadow hover:shadow-md transition relative\">\r\n+        <div className=\"absolute top-2 right-2 flex gap-2\">\r\n+          <button onClick={() => handleEdit(product)} className=\"text-blue-600 hover:text-blue-800\">\r\n+            <FaEdit />\r\n+          </button>\r\n+          <button onClick={() => product.id && handleDelete(product.id)} className=\"text-red-600 hover:text-red-800\">\r\n+            <FaTrash />\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"w-full h-40 flex items-center justify-center overflow-hidden\">\r\n+          {product.image ? (\r\n+            <img\r\n+              src={product.image || \"/placeholder.svg\"}\r\n+              alt={product.title || \"Product\"}\r\n+              className=\"w-full h-full object-contain pt-3\"\r\n+              onError={(e) => {\r\n+                ;(e.target as HTMLImageElement).src = \"/placeholder.svg\"\r\n+              }}\r\n+            />\r\n+          ) : (\r\n+            <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\r\n+              <span className=\"text-gray-400\">No image</span>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+        <h2 className=\"font-semibold text-lg mt-2\">{product.title || \"Untitled Product\"}</h2>\r\n+        <p className=\"text-gray-600\">${(product.price || 0).toFixed(2)}</p>\r\n+      </div>\r\n+    )\r\n+  }\r\n+\r\n   return (\r\n     <div className=\"p-6\">\r\n       <div className=\"flex justify-between items-center mb-4\">\r\n         <h1 className=\"text-2xl font-bold\">Products</h1>\r\n@@ -206,21 +232,17 @@\n             <label className=\"text-sm text-gray-700\">Min:</label>\r\n             <input\r\n               type=\"number\"\r\n               value={priceRange[0]}\r\n-              onChange={(e) =>\r\n-                setPriceRange([parseFloat(e.target.value) || 0, priceRange[1]])\r\n-              }\r\n+              onChange={(e) => setPriceRange([Number.parseFloat(e.target.value) || 0, priceRange[1]])}\r\n               className=\"w-20 p-1 border rounded\"\r\n               min={0}\r\n             />\r\n             <label className=\"text-sm text-gray-700\">Max:</label>\r\n             <input\r\n               type=\"number\"\r\n               value={priceRange[1]}\r\n-              onChange={(e) =>\r\n-                setPriceRange([priceRange[0], parseFloat(e.target.value) || 0])\r\n-              }\r\n+              onChange={(e) => setPriceRange([priceRange[0], Number.parseFloat(e.target.value) || 0])}\r\n               className=\"w-20 p-1 border rounded\"\r\n               min={0}\r\n             />\r\n           </div>\r\n@@ -229,19 +251,20 @@\n \r\n       {loading && <p>Loading...</p>}\r\n       {error && <p className=\"text-red-500\">{error}</p>}\r\n \r\n-      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n-        {paginatedProducts.map((product:Product) => (\r\n-          <div className=\"border border-red-500\">\r\n-            <ProductCard\r\n-              key={product.id}\r\n-              product={product}\r\n-              onEdit={handleEdit}\r\n-              onDelete={handleDelete}\r\n-            />\r\n+      <div className=\"flex flex-col md:grid md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n+        {paginatedProducts.length > 0 ? (\r\n+          paginatedProducts.map((product: any) => (\r\n+            <div key={product?.id || Math.random()} className=\"mb-4 md:mb-0\">\r\n+              {renderProductCard(product)}\r\n+            </div>\r\n+          ))\r\n+        ) : (\r\n+          <div className=\"col-span-full text-center py-8\">\r\n+            <p className=\"text-gray-500\">No products found matching your criteria</p>\r\n           </div>\r\n-        ))}\r\n+        )}\r\n       </div>\r\n \r\n       {totalPages > 1 && (\r\n         <div className=\"flex justify-center mt-6 space-x-2\">\r\n@@ -249,11 +272,9 @@\n             <button\r\n               key={page}\r\n               onClick={() => setCurrentPage(page)}\r\n               className={`px-3 py-1 rounded ${\r\n-                page === currentPage\r\n-                  ? \"bg-blue-600 text-white\"\r\n-                  : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n+                page === currentPage ? \"bg-blue-600 text-white\" : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n               }`}\r\n             >\r\n               {page}\r\n             </button>\r\n@@ -265,11 +286,9 @@\n       {isModalOpen && (\r\n         <div className=\"fixed inset-0 bg-white/30 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\r\n           <div className=\"bg-white/90 backdrop-blur-md rounded-xl shadow-xl p-6 w-full max-w-md relative border border-gray-200\">\r\n             <div className=\"flex justify-between items-center mb-4\">\r\n-              <h2 className=\"text-xl font-bold text-gray-800\">\r\n-                {isEditing ? \"Edit Product\" : \"Add New Product\"}\r\n-              </h2>\r\n+              <h2 className=\"text-xl font-bold text-gray-800\">{isEditing ? \"Edit Product\" : \"Add New Product\"}</h2>\r\n               <button\r\n                 onClick={() => setIsModalOpen(false)}\r\n                 className=\"text-gray-500 hover:text-gray-700 text-xl font-bold\"\r\n               >\r\n@@ -278,109 +297,69 @@\n             </div>\r\n \r\n             <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Title*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Title*</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"title\"\r\n                   value={newProduct.title}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.title ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.title ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                 />\r\n-                {formErrors.title && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.title}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.title && <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Price*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Price*</label>\r\n                 <input\r\n                   type=\"number\"\r\n                   name=\"price\"\r\n                   value={newProduct.price}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.price ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.price ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                   min=\"0\"\r\n                   step=\"0.01\"\r\n                 />\r\n-                {formErrors.price && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.price}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.price && <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Description*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Description*</label>\r\n                 <textarea\r\n                   name=\"description\"\r\n                   value={newProduct.description}\r\n                   onChange={handleInputChange}\r\n                   className={`w-full p-2 border rounded ${\r\n-                    formErrors.description\r\n-                      ? \"border-red-500\"\r\n-                      : \"border-gray-300\"\r\n+                    formErrors.description ? \"border-red-500\" : \"border-gray-300\"\r\n                   }`}\r\n                   rows={3}\r\n                 />\r\n-                {formErrors.description && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.description}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.description && <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Image URL*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Image URL*</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"image\"\r\n                   value={newProduct.image}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.image ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.image ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                 />\r\n-                {formErrors.image && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.image}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.image && <p className=\"text-red-500 text-sm mt-1\">{formErrors.image}</p>}\r\n               </div>\r\n \r\n               <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n-                  Category*\r\n-                </label>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Category*</label>\r\n                 <input\r\n                   type=\"text\"\r\n                   name=\"category\"\r\n                   value={newProduct.category}\r\n                   onChange={handleInputChange}\r\n-                  className={`w-full p-2 border rounded ${\r\n-                    formErrors.category ? \"border-red-500\" : \"border-gray-300\"\r\n-                  }`}\r\n+                  className={`w-full p-2 border rounded ${formErrors.category ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                 />\r\n-                {formErrors.category && (\r\n-                  <p className=\"text-red-500 text-sm mt-1\">\r\n-                    {formErrors.category}\r\n-                  </p>\r\n-                )}\r\n+                {formErrors.category && <p className=\"text-red-500 text-sm mt-1\">{formErrors.category}</p>}\r\n               </div>\r\n \r\n               <div className=\"flex justify-end space-x-3 pt-4\">\r\n                 <button\r\n@@ -389,12 +368,9 @@\n                   className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n                 >\r\n                   Cancel\r\n                 </button>\r\n-                <button\r\n-                  type=\"submit\"\r\n-                  className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n-                >\r\n+                <button type=\"submit\" className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\r\n                   {isEditing ? \"Update Product\" : \"Create Product\"}\r\n                 </button>\r\n               </div>\r\n             </form>\r\n@@ -422,19 +398,16 @@\n                 className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n               >\r\n                 No\r\n               </button>\r\n-              <button\r\n-                onClick={confirmDelete}\r\n-                className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n-              >\r\n+              <button onClick={confirmDelete} className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\">\r\n                 Yes, Delete\r\n               </button>\r\n             </div>\r\n           </div>\r\n         </div>\r\n       )}\r\n     </div>\r\n-  );\r\n-};\r\n+  )\r\n+}\r\n \r\n-export default HomePage;\r\n+export default HomePage\r\n"
                },
                {
                    "date": 1747979414548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\"use client\"\r\n \r\n import type React from \"react\"\r\n \r\n import { useEffect, useState } from \"react\"\r\n"
                },
                {
                    "date": 1747979431791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\"use client\"\r\n \r\n import type React from \"react\"\r\n \r\n import { useEffect, useState } from \"react\"\r\n"
                }
            ],
            "date": 1747978366217,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchProducts,\r\n  createProduct,\r\n  updateProduct,\r\n  deleteProduct,\r\n} from \"../redux/productsSlice\";\r\nimport type { RootState, AppDispatch } from \"../redux/store\";\r\nimport ProductCard from \"../components/ProductCard\";\r\nimport { toast } from \"react-toastify\";\r\nimport type { Product } from \"../types/product\";\r\nconst HomePage = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { items, loading, error } = useSelector(\r\n    (state: RootState) => state.products\r\n  );\r\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\r\n  const allCategories = [\"All\", ...new Set(items.map((item) => item.category))];\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editingId, setEditingId] = useState<number | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000]);\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n  const [productToDelete, setProductToDelete] = useState<number | null>(null);\r\n  const [newProduct, setNewProduct] = useState({\r\n    title: \"\",\r\n    price: \"\",\r\n    description: \"\",\r\n    image: \"\",\r\n    category: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 8; // You can adjust this number\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProducts());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n  }, [searchQuery, priceRange, selectedCategory]);\r\n\r\n  const handleInputChange = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = e.target;\r\n    setNewProduct((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors: Record<string, string> = {};\r\n    if (!newProduct.title) errors.title = \"Title is required\";\r\n    if (!newProduct.price) errors.price = \"Price is required\";\r\n    if (!newProduct.description) errors.description = \"Description is required\";\r\n    if (!newProduct.image) errors.image = \"Image URL is required\";\r\n    if (!newProduct.category) errors.category = \"Category is required\";\r\n\r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!validateForm()) return;\r\n\r\n    try {\r\n      if (isEditing && editingId !== null) {\r\n        await dispatch(\r\n          updateProduct({\r\n            ...newProduct,\r\n            id: editingId,\r\n            price: parseFloat(newProduct.price),\r\n          })\r\n        ).unwrap();\r\n        toast.success(\"Product updated successfully!\");\r\n      } else {\r\n        await dispatch(\r\n          createProduct({\r\n            ...newProduct,\r\n            price: parseFloat(newProduct.price),\r\n          })\r\n        ).unwrap();\r\n        toast.success(\"Product created successfully!\");\r\n      }\r\n\r\n      setIsModalOpen(false);\r\n      setNewProduct({\r\n        title: \"\",\r\n        price: \"\",\r\n        description: \"\",\r\n        image: \"\",\r\n        category: \"\",\r\n      });\r\n      setIsEditing(false);\r\n      setEditingId(null);\r\n    } catch (err) {\r\n      console.error(err);\r\n      toast.error(\r\n        isEditing ? \"Failed to update product.\" : \"Failed to create product.\"\r\n      );\r\n    }\r\n\r\n    setCurrentPage(1); // Show the first page immediately after adding\r\n\r\n  };\r\n\r\n  const handleDelete = async (id: number) => {\r\n    setProductToDelete(id);\r\n    setIsDeleteModalOpen(true);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    if (productToDelete === null) return;\r\n    \r\n    try {\r\n      await dispatch(deleteProduct(productToDelete)).unwrap();\r\n      toast.success(\"Product deleted!\");\r\n    } catch (error) {\r\n      toast.error(\"Failed to delete product.\");\r\n    } finally {\r\n      setIsDeleteModalOpen(false);\r\n      setProductToDelete(null);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (product: any) => {\r\n    setNewProduct({\r\n      title: product.title,\r\n      price: String(product.price),\r\n      description: product.description,\r\n      image: product.image,\r\n      category: product.category,\r\n    });\r\n    setEditingId(product.id);\r\n    setIsEditing(true);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const filteredProducts = [...items]\r\n  .sort((a, b) => b.id - a.id)\r\n  .filter((product) => {\r\n    const matchesSearch = product.title\r\n      .toLowerCase()\r\n      .includes(searchQuery.toLowerCase());\r\n\r\n    const matchesPrice =\r\n      product.price >= priceRange[0] && product.price <= priceRange[1];\r\n\r\n    const matchesCategory =\r\n      selectedCategory === \"All\" || product.category === selectedCategory;\r\n\r\n    return matchesSearch && matchesPrice && matchesCategory;\r\n  });\r\n\r\n\r\n  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);\r\n  const paginatedProducts = filteredProducts.slice(\r\n    (currentPage - 1) * itemsPerPage,\r\n    currentPage * itemsPerPage\r\n  );\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h1 className=\"text-2xl font-bold\">Products</h1>\r\n        <button\r\n          onClick={() => setIsModalOpen(true)}\r\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition\"\r\n        >\r\n          Add New Product\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6\">\r\n        {/* Search */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search products...\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n          className=\"w-full md:w-1/2 p-2 border border-gray-300 rounded\"\r\n        />\r\n\r\n        {/* Filters: Category + Price */}\r\n        <div className=\"flex items-center gap-4 flex-wrap\">\r\n          {/* Category Filter */}\r\n          <select\r\n            value={selectedCategory}\r\n            onChange={(e) => setSelectedCategory(e.target.value)}\r\n            className=\"p-2 border border-gray-300 rounded\"\r\n          >\r\n            {allCategories.map((category) => (\r\n              <option key={category} value={category}>\r\n                {category}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          {/* Price Filter (Unchanged) */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <label className=\"text-sm text-gray-700\">Min:</label>\r\n            <input\r\n              type=\"number\"\r\n              value={priceRange[0]}\r\n              onChange={(e) =>\r\n                setPriceRange([parseFloat(e.target.value) || 0, priceRange[1]])\r\n              }\r\n              className=\"w-20 p-1 border rounded\"\r\n              min={0}\r\n            />\r\n            <label className=\"text-sm text-gray-700\">Max:</label>\r\n            <input\r\n              type=\"number\"\r\n              value={priceRange[1]}\r\n              onChange={(e) =>\r\n                setPriceRange([priceRange[0], parseFloat(e.target.value) || 0])\r\n              }\r\n              className=\"w-20 p-1 border rounded\"\r\n              min={0}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n        {paginatedProducts.map((product:Product) => (\r\n          <ProductCard\r\n            key={product.id}\r\n            product={product}\r\n            onEdit={handleEdit}\r\n            onDelete={handleDelete}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {totalPages > 1 && (\r\n        <div className=\"flex justify-center mt-6 space-x-2\">\r\n          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\r\n            <button\r\n              key={page}\r\n              onClick={() => setCurrentPage(page)}\r\n              className={`px-3 py-1 rounded ${\r\n                page === currentPage\r\n                  ? \"bg-blue-600 text-white\"\r\n                  : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n              }`}\r\n            >\r\n              {page}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Create Product Modal */}\r\n      {isModalOpen && (\r\n        <div className=\"fixed inset-0 bg-white/30 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white/90 backdrop-blur-md rounded-xl shadow-xl p-6 w-full max-w-md relative border border-gray-200\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-bold text-gray-800\">\r\n                {isEditing ? \"Edit Product\" : \"Add New Product\"}\r\n              </h2>\r\n              <button\r\n                onClick={() => setIsModalOpen(false)}\r\n                className=\"text-gray-500 hover:text-gray-700 text-xl font-bold\"\r\n              >\r\n                ✕\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Title*\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  value={newProduct.title}\r\n                  onChange={handleInputChange}\r\n                  className={`w-full p-2 border rounded ${\r\n                    formErrors.title ? \"border-red-500\" : \"border-gray-300\"\r\n                  }`}\r\n                />\r\n                {formErrors.title && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">\r\n                    {formErrors.title}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Price*\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"price\"\r\n                  value={newProduct.price}\r\n                  onChange={handleInputChange}\r\n                  className={`w-full p-2 border rounded ${\r\n                    formErrors.price ? \"border-red-500\" : \"border-gray-300\"\r\n                  }`}\r\n                  min=\"0\"\r\n                  step=\"0.01\"\r\n                />\r\n                {formErrors.price && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">\r\n                    {formErrors.price}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Description*\r\n                </label>\r\n                <textarea\r\n                  name=\"description\"\r\n                  value={newProduct.description}\r\n                  onChange={handleInputChange}\r\n                  className={`w-full p-2 border rounded ${\r\n                    formErrors.description\r\n                      ? \"border-red-500\"\r\n                      : \"border-gray-300\"\r\n                  }`}\r\n                  rows={3}\r\n                />\r\n                {formErrors.description && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">\r\n                    {formErrors.description}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Image URL*\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"image\"\r\n                  value={newProduct.image}\r\n                  onChange={handleInputChange}\r\n                  className={`w-full p-2 border rounded ${\r\n                    formErrors.image ? \"border-red-500\" : \"border-gray-300\"\r\n                  }`}\r\n                />\r\n                {formErrors.image && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">\r\n                    {formErrors.image}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Category*\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"category\"\r\n                  value={newProduct.category}\r\n                  onChange={handleInputChange}\r\n                  className={`w-full p-2 border rounded ${\r\n                    formErrors.category ? \"border-red-500\" : \"border-gray-300\"\r\n                  }`}\r\n                />\r\n                {formErrors.category && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">\r\n                    {formErrors.category}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"flex justify-end space-x-3 pt-4\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setIsModalOpen(false)}\r\n                  className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n                >\r\n                  {isEditing ? \"Update Product\" : \"Create Product\"}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Delete Confirmation Modal */}\r\n      {isDeleteModalOpen && (\r\n        <div className=\"fixed inset-0 bg-white/30 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white/90 backdrop-blur-md rounded-xl shadow-xl p-6 w-full max-w-md relative border border-gray-200\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-bold text-gray-800\">Confirm Delete</h2>\r\n              <button\r\n                onClick={() => setIsDeleteModalOpen(false)}\r\n                className=\"text-gray-500 hover:text-gray-700 text-xl font-bold\"\r\n              >\r\n                ✕\r\n              </button>\r\n            </div>\r\n            <p className=\"text-gray-600 mb-6\">Are you sure you want to delete this product?</p>\r\n            <div className=\"flex justify-end space-x-3\">\r\n              <button\r\n                onClick={() => setIsDeleteModalOpen(false)}\r\n                className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\r\n              >\r\n                No\r\n              </button>\r\n              <button\r\n                onClick={confirmDelete}\r\n                className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n              >\r\n                Yes, Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"
        }
    ]
}